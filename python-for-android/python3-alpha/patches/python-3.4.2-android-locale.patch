diff -ru Python-3.3.5/Modules/Setup.dist Python-3.3.5-android/Modules/Setup.dist
--- Python-3.3.5/Modules/Setup.dist	2014-03-09 09:40:23.000000000 +0100
+++ Python-3.3.5-android/Modules/Setup.dist	2014-08-04 22:16:29.000000000 +0200
@@ -118,7 +118,7 @@
 itertools itertoolsmodule.c    # Functions creating iterators for efficient looping

 # access to ISO C locale support
-_locale _localemodule.c  # -lintl
+#_locale _localemodule.c  # -lintl

 # Standard I/O baseline
 _io -I$(srcdir)/Modules/_io _io/_iomodule.c _io/iobase.c _io/fileio.c _io/bytesio.c _io/bufferedio.c _io/textio.c _io/stringio.c
@@ -357,7 +357,7 @@
 # Andrew Kuchling's zlib module.
 # This require zlib 1.1.3 (or later).
 # See http://www.gzip.org/zlib/
-#zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz
+zlib zlibmodule.c -I$(SYSROOT)/include -L$(SYSROOT)/lib -lz

 # Interface to the Expat XML parser
 #
 # Expat was written by James Clark and is now maintained by a group of
diff -ru Python-3.3.5/Modules/_decimal/libmpdec/io.c Python-3.3.5-android/Modules/_decimal/libmpdec/io.c
--- Python-3.3.5/Modules/_decimal/libmpdec/io.c	2014-03-09 09:40:25.000000000 +0100
+++ Python-3.3.5-android/Modules/_decimal/libmpdec/io.c	2014-08-04 22:16:29.000000000 +0200
@@ -868,10 +868,17 @@
         }
         spec->type = *cp++;
         spec->type = (spec->type == 'N') ? 'G' : 'g';
+#ifdef __ANDROID__
+        spec->dot = ".";
+        spec->sep = ",";
+        spec->grouping = "\3";
+#else
         lc = localeconv();
         spec->dot = lc->decimal_point;
         spec->sep = lc->thousands_sep;
         spec->grouping = lc->grouping;
+#endif
+
         if (mpd_validate_lconv(spec) < 0) {
             return 0; /* GCOV_NOT_REACHED */
         }
diff -ru Python-3.3.5/Modules/_localemodule.c Python-3.3.5-android/Modules/_localemodule.c
--- Python-3.3.5/Modules/_localemodule.c	2014-03-09 09:40:26.000000000 +0100
+++ Python-3.3.5-android/Modules/_localemodule.c	2014-08-04 22:16:29.000000000 +0200
@@ -38,6 +38,13 @@
 #include <windows.h>
 #endif

+#if __ANDROID__
+/* Android's locale support is pretty much unusable, it's better to have the
+   higher-level module fall back to C locale emulation. */
+#error "Android's locale support is too incomplete to create a usable module."
+#endif
+
+
 PyDoc_STRVAR(locale__doc__, "Support for POSIX locales.");

 static PyObject *Error;
@@ -141,6 +148,11 @@
     if (!result)
         return NULL;

+#ifdef __ANDROID__
+    /* Don't even try on Android's broken locale.h. */
+    goto failed;
+#else
+
     /* if LC_NUMERIC is different in the C library, use saved value */
     l = localeconv();

@@ -189,6 +201,7 @@
     RESULT_INT(p_sign_posn);
     RESULT_INT(n_sign_posn);
     return result;
+#endif // __ANDROID__

   failed:
     Py_XDECREF(result);
diff -ru Python-3.3.5/Modules/main.c Python-3.3.5-android/Modules/main.c
--- Python-3.3.5/Modules/main.c	2014-03-09 09:40:27.000000000 +0100
+++ Python-3.3.5-android/Modules/main.c	2014-08-04 22:16:29.000000000 +0200
@@ -522,7 +522,7 @@
         oldloc = strdup(setlocale(LC_ALL, NULL));
         setlocale(LC_ALL, "");
         for (p = strtok(buf, ","); p != NULL; p = strtok(NULL, ",")) {
-#ifdef __APPLE__
+#if defined(__APPLE__) || defined(__ANDROID__)
             /* Use utf-8 on Mac OS X */
             unicode = PyUnicode_FromString(p);
 #else
diff -ru Python-3.3.5/Python/formatter_unicode.c Python-3.3.5-android/Python/formatter_unicode.c
--- Python-3.3.5/Python/formatter_unicode.c	2014-03-09 09:40:32.000000000 +0100
+++ Python-3.3.5-android/Python/formatter_unicode.c	2014-08-04 22:16:29.000000000 +0200
@@ -665,6 +665,7 @@
 {
     switch (type) {
     case LT_CURRENT_LOCALE: {
+#ifndef __ANDROID__
         struct lconv *locale_data = localeconv();
         locale_info->decimal_point = PyUnicode_DecodeLocale(
                                          locale_data->decimal_point,
@@ -680,6 +681,7 @@
         }
         locale_info->grouping = locale_data->grouping;
         break;
+#endif // __ANDROID__
     }
     case LT_DEFAULT_LOCALE:
         locale_info->decimal_point = PyUnicode_FromOrdinal('.');
diff -ru Python-3.3.5/Python/pystrtod.c Python-3.3.5-android/Python/pystrtod.c
--- Python-3.3.5/Python/pystrtod.c	2014-03-09 09:40:33.000000000 +0100
+++ Python-3.3.5-android/Python/pystrtod.c	2014-08-04 22:16:29.000000000 +0200
@@ -177,8 +177,12 @@

     fail_pos = NULL;

+#ifdef __ANDROID__
+    decimal_point = ".";
+#else
     locale_data = localeconv();
     decimal_point = locale_data->decimal_point;
+#endif
     decimal_point_len = strlen(decimal_point);

     assert(decimal_point_len != 0);
@@ -378,8 +382,12 @@
 Py_LOCAL_INLINE(void)
 change_decimal_from_locale_to_dot(char* buffer)
 {
+#ifdef __ANDROID__
+    const char *decimal_point = ".";
+#else
     struct lconv *locale_data = localeconv();
     const char *decimal_point = locale_data->decimal_point;
+#endif

     if (decimal_point[0] != '.' || decimal_point[1] != 0) {
         size_t decimal_point_len = strlen(decimal_point);
